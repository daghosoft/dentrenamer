<?xml version="1.0" encoding="UTF-8"?><templates><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="info">//TODO da rimuovere
LOGGER.info("### [{}]",${localVar});</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="error">LOGGER.error("### [{}]",${localVar});</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="suppress">@SuppressFBWarnings(value = { "NP_UNWRITTEN_FIELD", "UWF_UNWRITTEN_FIELD", "UR_UNINIT_READ" })</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="suppress_serial">@SuppressFBWarnings(value = { "SE_BAD_FIELD_STORE", "SE_BAD_FIELD" })</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="suppress_side_constructor"> @SuppressFBWarnings(value = { "SEC_SIDE_EFFECT_CONSTRUCTOR" })</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="todo">//TODO implmentare Junit</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="profiler">Profiler profiler = new Profiler(this.getClass().getSimpleName());
profiler.setLogger(LOGGER);

profiler.start("");
		
profiler.stop();</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="daoTest">import static org.assertj.core.api.Assertions.assertThat;

import org.apache.commons.lang3.StringUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class &lt;ClassNAME&gt;Test {

    private static final String PCML_NAME = "";
    private MarchioUserState userState = new MarchioUserState();

    @Mock
    private BXProgram program;

    @InjectMocks
    private &lt;ClassNAME&gt; sut;

    @Before
    public void before() {
        userState.setCodiceMarchio("x-codice");
        userState.setProgressivoSottoscheda("x-spr");
        sut.setProgram(program);
    }

    @Test
    public void pcmlNameTest() {
        assertThat(PCML_NAME).isEqualTo(&lt;ClassNAME&gt;.PCML_NAME);
    }

    @Test
    public void executeProgramTest() {

        DateProdottiBean pBean = new DateProdottiBean();
        // when
        sut.executeProgram(JACTION.LISTA, pBean, userState);
        // then
        Mockito.verify(program).setHeader(userState, JACTION.LISTA.toString(), PCML_NAME);
        Mockito.verify(program).input("INPJS.I_PRA", userState.getCodiceMarchio());
        Mockito.verify(program).input("INPJS.I_NRI", pBean.getRIGIM());
        Mockito.verify(program).input("INPJS.I_SPR", StringUtils.EMPTY);
        Mockito.verify(program).input("INPJS.I_DATA", pBean.getDATA());
        Mockito.verify(program).run();
    }

    @Test
    public void editTest() {
        sut.edit(new DateProdottiBean(), userState);
        Mockito.verify(program).setHeader(userState, JACTION.MODIFICA.toString(), PCML_NAME);
        Mockito.verify(program).run();
    }

    @Test
    public void insertTest() {
        sut.insert(new DateProdottiBean(), userState);
        Mockito.verify(program).setHeader(userState, JACTION.IMMETTI.toString(), PCML_NAME);
        Mockito.verify(program).run();
    }

    @Test
    public void deleteTest() {
        sut.delete(new DateProdottiBean(), userState);
        Mockito.verify(program).setHeader(userState, JACTION.CANCELLA.toString(), PCML_NAME);
        Mockito.verify(program).run();
    }

   @Test(expected = UnsupportedOperationException.class)
    public void getTest() throws Exception {
        sut.get(new DateProdottiBean(), userState);
    }

}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="beanTest">import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.CoreMatchers.allOf;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.UUID;

import org.junit.Test;

import com.google.code.beanmatchers.BeanMatchers;
import com.google.code.beanmatchers.ValueGenerator;

public class &lt;Bean&gt;Test {
    @Test
    public void testClassIsGoodBean() {

        BeanMatchers.registerValueGenerator(new ValueGenerator&lt;UUID&gt;() {
            @Override
            public UUID generate() {
                return UUID.randomUUID(); // Change to generate random instance
            }
        }, UUID.class);
        assertThat(&lt;Bean&gt;.class, allOf(
                BeanMatchers.hasValidBeanConstructor(),
                BeanMatchers.hasValidGettersAndSetters(),
                BeanMatchers.hasValidBeanHashCode(),
                BeanMatchers.hasValidBeanEqualsFor("id"),
                BeanMatchers.hasValidBeanToString()));

        &lt;Bean&gt; sut = new &lt;Bean&gt;();
        assertThat(sut.beanId()).isNotNull();
    }
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="fortestonly">
    @ForTestOnly
    public void setProgram(BXProgram program) {
        this.program = program;
    }</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="formatterOff">// @formatter:off
        
Codice che si vuole formattare a mano
        
// @formatter:on</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="bdd">BDDMockito.given(program.outputAsHashMap("outpwr_ds")).willReturn(new JHashMap());</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="suppress_ supplied_superclasses">@SuppressFBWarnings(value = { "SCII_SPOILED_CHILD_INTERFACE_IMPLEMENTOR" })</template></templates>